generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  posts      Post[]
  comments   Comments[]
  profile    Profile[]
  followers  Followers[] @relation("UserToFollowers")
  follower   Followers[] @relation("FollowerToUsers")
  following  Following[] @relation("UserToFollowing")
  followedBy Following[] @relation("FollowingToUsers")
  communities Community[]
}

model Followers {
  id         String @id @default(uuid())
  user       User   @relation("UserToFollowers", fields: [userId], references: [id])
  userId     String
  follower   User   @relation("FollowerToUsers", fields: [followerId], references: [id])
  followerId String

  @@unique([userId, followerId])
}

model Following {
  id          String @id @default(uuid())
  user        User   @relation("UserToFollowing", fields: [userId], references: [id])
  userId      String
  following   User   @relation("FollowingToUsers", fields: [followingId], references: [id])
  followingId String

  @@unique([userId, followingId])
}

model Community{
  id        String   @id @default(uuid())
  name      String
  description String
  private   Boolean
  imageCommunity String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
  posts     Post[]
}

model Post {
  id        String     @id @default(uuid())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  comments  Comments[]
  community Community? @relation(fields: [communityId], references: [id])
  communityId String
}

model Profile {
  id          String   @id @default(uuid())
  bio         String
  avatarImage String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
}
